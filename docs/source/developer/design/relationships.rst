.. Copyright 2023 NWChemEx-Project
..
.. Licensed under the Apache License, Version 2.0 (the "License");
.. you may not use this file except in compliance with the License.
.. You may obtain a copy of the License at
..
.. http://www.apache.org/licenses/LICENSE-2.0
..
.. Unless required by applicable law or agreed to in writing, software
.. distributed under the License is distributed on an "AS IS" BASIS,
.. WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
.. See the License for the specific language governing permissions and
.. limitations under the License.

.. _relationships_design:

###########################
Tensor Relationships Design
###########################

******************************
What is a tensor relationship?
******************************

It is often possible to generate an element of a tensor given the value of a
different element. In other words, the elements are not linearly-independent
parameters. For example, if we know an :math:`m` by :math:`m` element matrix
:math:`A` is a symmetric matrix, then we know that its elements satisfy
:math:`A_{ij}=A_{ji}`. In turn, only the diagonal elements, and half of the
off-diagonal elements, are actually linearly-independent. When a tensor contains
linearly-dependent elements we say that a "relationship" exists among those
elements. We intentionally avoid the word "symmetry" to avoid mathematical and
spatial connotations.

**************************************
Why do we need (tensor) relationships?
**************************************

Performance. If we store both the linearly-independent and linearly-dependent
elements we waste memory storing the linearly-dependent elements since they can
be generated by the linearly-independent elements. We also potentially waste
computational time since redundant operations will occur multiple times. That
said an obligatory caveat is in order, namely that non-standard memory access
patterns can also ruin performance and thus it sometimes can be beneficial to
have some redundancy.

************************************
(Tensor) relationship considerations
************************************

#. Symmetry, antisymmetry

   - Arguably most important consideration on list.

#. Hermitian, anti-Hermitian

   - Only relevant for complex elements.

#. Cyclic permutations?

   - Generalizes above to permutations of three or more indices.

#. Spatial symmetry (of basis functions)

   - Out of scope. Manifests as sparsity.

#. Sparse maps.

   - Map offsets of one (or more) mode(s) to the non-zero offsets of another
     mode.
   - A non-symmetry relationship among modes.
